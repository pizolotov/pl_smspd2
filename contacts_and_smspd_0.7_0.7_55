from phidl import Device
from phidl import quickplot as qp # Rename "quickplot()" to the easier "qp()"
import phidl.geometry as pg
from matplotlib import pyplot as plt

###
#Chip window -  1578.00000	2825.00000
#               1422.00000	2825.00000
#               1422.00000	2675.00000
#               1578.00000	2675.00000

window_center = [1422 + (1578 - 1422)/2, 2675 + (2825 -  2675)/2]
###


Markhorizontal = Device()

xpts = (0   , 137,  137,    0,  0,   27,    27,     87,     87,     27,     27,     0,      0)
ypts = (2613, 2613, 2887, 2887, 2837, 2837, 2777,   2777,   2723,   2723,   2663,   2663,   2613)
Markhorizontal.add_polygon( [xpts, ypts], layer = 0)
#markleft = Marks.add_polygon( [xpts, ypts], layer = 0)

Markvertical = Device()

xpts = (1323,   1323,   1637,   1637,   1587,   1587,   1527,   1527,   1473,   1473,   1373,   1373)
ypts = (4000,   3863,   3863,   4000,   4000,   3973,   3973,   3913,   3913,   3973,   3973,   4000)
Markvertical.add_polygon( [xpts, ypts], layer = 0)
#marktop = Marks.add_polygon( [xpts, ypts], layer = 0)


#marktop2 = Marks.add_ref(markleft)
#mark.move([100,0])

#qp(Marks)




Markslayot = Device()

marktop = Markslayot.add_ref(Markvertical)
markbot = Markslayot.add_ref(Markvertical)
markbot.mirror(p1 = [0,2000], p2 = [1500,2000]) # Reflects across the line formed by p1 and p2


markleft = Markslayot.add_ref(Markhorizontal)
markright = Markslayot.add_ref(Markhorizontal)
markright.mirror(p1 = [1500,0], p2 = [1500,4000]) # Reflects across the line formed by p1 and p2






Groundcontact = Device()
xpts = (250, 250,2750,2750,2160,2160,1967,1578,1422,1033, 840,840)
ypts = (250,3750,3750, 250, 250,3160,3160,2825,2825,3160,3160,250)
#                               structure connect^
Groundcontact.add_polygon( [xpts, ypts], layer = 0)





Centralcontact = Device()
xpts = (1033,1967,1967,1578,1422,1033)
ypts = ( 250, 250,2340,2675,2675,2340)
#           structure connect^
Centralcontact.add_polygon( [xpts, ypts], layer = 0)




Chip_prelim = Device()
Centralcontact = Chip_prelim.add_ref(Centralcontact)
Groundcontact = Chip_prelim.add_ref(Groundcontact)
Markslayot = Chip_prelim.add_ref(Markslayot)

###
w_sspd = .7
ff = 0.5
###

Meander = pg.snspd(wire_width = w_sspd, wire_pitch = w_sspd/ff, size = (55,55),
        num_squares = None, turn_ratio = 4,
        terminals_same_side = False, layer = 0)
#Centering and rotating
Meander.rotate(90)
Meander.movex(window_center[0] + (Meander.ports[1].x-Meander.ports[2].x)/2 )
Meander.movey(window_center[1] - (Meander.ports[1].y+Meander.ports[2].y)/2 )
###
Terminal = pg.optimal_step(start_width = w_sspd, end_width = 30, num_pts = 500, width_tol = 1e-3,
                 anticrowding_factor = 2, symmetric = False, layer = 0)


#center = pg.circle(1,2.5)
#center.movex(window_center[0])
#center.movey(window_center[1])
#center_point = Chip_prelim.add_ref(center)

detector = Chip_prelim.add_ref(Meander)
terminal1 = Chip_prelim.add_ref(Terminal)
terminal2 = Chip_prelim.add_ref(Terminal)

terminal1.connect(port = 1, destination = detector.ports[1])
terminal2.connect(port = 1, destination = detector.ports[2])

#Union of structures
Chip_prelim = pg.union(Chip_prelim, by_layer=True)
###

#Chip inversion
full_chip = pg.rectangle([3000, 4000])
Chip_prelim = pg.xor_diff(full_chip, Chip_prelim)


qp(Chip_prelim)
#plt.show()
###
Chip_prelim.flatten()
###

#Chip_prelim.write_gds(filename = 'triple-bend.gds')
